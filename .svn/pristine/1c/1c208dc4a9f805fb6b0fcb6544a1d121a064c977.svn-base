#include <cmath>
#include <iostream>
#include "configFile.h"
#include "CMassSpringSystem.h"
#include "glut.h"
#include "Render_API.h"

#pragma comment( lib, "glut32.lib" )

const double g_cdDeltaT = 0.001f;
const double g_cdK	   = 2500.0f;
const double g_cdD	   = 50.0f;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Constructor & Destructor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CMassSpringSystem::CMassSpringSystem()
   :m_bDrawParticle(true),
    m_bDrawStruct(false),
    m_bDrawShear(false),
    m_bDrawBending(false),
    m_bSimulation(false),

    m_iIntegratorType(EXPLICIT_EULER),

    m_dDeltaT(g_cdDeltaT),
    m_dSpringCoefStruct(g_cdK),
    m_dSpringCoefShear(g_cdK),
    m_dSpringCoefBending(g_cdK),
    m_dDamperCoefStruct(g_cdD),
    m_dDamperCoefShear(g_cdD),
    m_dDamperCoefBending(g_cdD),
    m_dRotate(0.0f),

    m_Offset(Vector3d::ZERO),
    m_ForceField(Vector3d(0.0,-9.8,0.0)),

    m_GoalNet(),
    m_Balls()
{
}

CMassSpringSystem::CMassSpringSystem(const std::string &a_rcsConfigFilename)
:m_GoalNet(a_rcsConfigFilename)
{
    int iIntegratorType;
    double dSpringCoef,dDamperCoef,dHeightOffset;

    ConfigFile configFile;
    configFile.suppressWarnings(1);

    configFile.addOption("DrawParticle"        ,&m_bDrawParticle);
    configFile.addOption("DrawSpringStructural",&m_bDrawStruct);
    configFile.addOption("DrawSpringShear"     ,&m_bDrawShear);
    configFile.addOption("DrawSpringBending"   ,&m_bDrawBending);
    configFile.addOption("SimulationStart"     ,&m_bSimulation);

    configFile.addOption("IntegratorType",&iIntegratorType);
    configFile.addOption("DeltaT",&m_dDeltaT);
    configFile.addOption("SpringCoef",&dSpringCoef);
    configFile.addOption("DamperCoef",&dDamperCoef);
    configFile.addOption("Rotate",&m_dRotate);
    configFile.addOption("HeightOffset",&dHeightOffset);

    int code = configFile.parseOptions((char *)a_rcsConfigFilename.c_str());
    if(code == 1)
    {
        std::cout<<"Error in CMassSpringSystem constructor."<<std::endl;
        system("pause");
        exit(0);
    }
    m_iIntegratorType = CMassSpringSystem::EXPLICIT_EULER;
    if(iIntegratorType == 1)
    {
        m_iIntegratorType = CMassSpringSystem::RUNGE_KUTTA;
    }

    m_dSpringCoefStruct  = dSpringCoef;
    m_dSpringCoefShear   = dSpringCoef;
    m_dSpringCoefBending = dSpringCoef;
    m_dDamperCoefStruct  = dDamperCoef;
    m_dDamperCoefShear   = dDamperCoef;
    m_dDamperCoefBending = dDamperCoef;

    if(dHeightOffset<0.0 || dHeightOffset>10.0)
        dHeightOffset = 0.0;

    m_Offset       = Vector3d(0.0,dHeightOffset,0.0);
    m_ForceField   = Vector3d(0.0,-9.8,0.0);

    Reset();
}

CMassSpringSystem::CMassSpringSystem(const CMassSpringSystem &a_rcMassSpringSystem)
    :m_bDrawParticle(a_rcMassSpringSystem.m_bDrawParticle),
    m_bDrawStruct(a_rcMassSpringSystem.m_bDrawStruct),
    m_bDrawShear(a_rcMassSpringSystem.m_bDrawShear),
    m_bDrawBending(a_rcMassSpringSystem.m_bDrawBending),
    m_bSimulation(a_rcMassSpringSystem.m_bSimulation),

    m_iIntegratorType(a_rcMassSpringSystem.m_iIntegratorType),

    m_dDeltaT(a_rcMassSpringSystem.m_dDeltaT),
    m_dSpringCoefStruct(a_rcMassSpringSystem.m_dSpringCoefStruct),
    m_dSpringCoefShear(a_rcMassSpringSystem.m_dSpringCoefShear),
    m_dSpringCoefBending(a_rcMassSpringSystem.m_dSpringCoefBending),
    m_dDamperCoefStruct(a_rcMassSpringSystem.m_dDamperCoefStruct),
    m_dDamperCoefShear(a_rcMassSpringSystem.m_dDamperCoefShear),
    m_dDamperCoefBending(a_rcMassSpringSystem.m_dDamperCoefBending),
    m_dRotate(a_rcMassSpringSystem.m_dRotate),

    m_Offset(a_rcMassSpringSystem.m_Offset),
    m_ForceField(a_rcMassSpringSystem.m_ForceField)
{
}
CMassSpringSystem::~CMassSpringSystem()
{
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Draw
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMassSpringSystem::Draw()
{
    DrawGoalNet();
    DrawBall();
}

void CMassSpringSystem::DrawGoalNet()
{    
    // draw particle
    if (m_bDrawParticle)
    {
        glPushAttrib(GL_CURRENT_BIT);
        for (int uiI = 0; uiI < m_GoalNet.ParticleNum(); uiI++)
        {
            setColor3f(1.0, 0.0, 0.0);
            drawPoint(m_GoalNet.GetParticle(uiI).GetPosition(), 3.0);
        }
        glPopAttrib();
    }

    // draw spring
    glPushAttrib(GL_CURRENT_BIT);
    for (int uiI = 0; uiI < m_GoalNet.SpringNum(); uiI++)
    {
        if ((m_GoalNet.GetSpring(uiI).GetSpringType() == CSpring::Type_nStruct && m_bDrawStruct) ||
            (m_GoalNet.GetSpring(uiI).GetSpringType() == CSpring::Type_nShear && m_bDrawShear) ||
            (m_GoalNet.GetSpring(uiI).GetSpringType() == CSpring::Type_nBending && m_bDrawBending))
        {
            int iSpringStartID = m_GoalNet.GetSpring(uiI).GetSpringStartID();
            int iSpringEndID = m_GoalNet.GetSpring(uiI).GetSpringEndID();
            Vector3d springColor = m_GoalNet.GetSpring(uiI).GetSpringColor();
            Vector3d startPos = m_GoalNet.GetParticle(iSpringStartID).GetPosition();
            Vector3d endPos = m_GoalNet.GetParticle(iSpringEndID).GetPosition();

            setColor3fv(springColor);
            drawLine(startPos, endPos);                   
        }
    }
    glPopAttrib();

    // draw cylinder
    int widthNum = m_GoalNet.GetWidthNum();
    int heightNum = m_GoalNet.GetHeightNum();
    int lengthNum = m_GoalNet.GetLengthNum();

    int backBottomRightId = m_GoalNet.GetParticleID(0, 0, 0);
    int backBottomLeftId = m_GoalNet.GetParticleID(0, 0, lengthNum-1);
    int frontBottomRightId = m_GoalNet.GetParticleID(widthNum-1, 0, 0);
    int frontBottomLeftId = m_GoalNet.GetParticleID(widthNum-1, 0, lengthNum-1);
    int backTopRightId = m_GoalNet.GetParticleID(0, heightNum-1, 0);
    int backTopLeftId = m_GoalNet.GetParticleID(0, heightNum-1, lengthNum-1);
    int frontTopRightId = m_GoalNet.GetParticleID(widthNum-1, heightNum-1, 0);
    int frontTopLeftId = m_GoalNet.GetParticleID(widthNum-1, heightNum-1, lengthNum-1);
    /*
    drawCylinder(
        m_GoalNet.GetParticle(backBottomRightId).GetPosition(), 
        m_GoalNet.GetParticle(backBottomLeftId).GetPosition(), 
        0.05);
    drawCylinder(
        m_GoalNet.GetParticle(backBottomRightId).GetPosition(),
        m_GoalNet.GetParticle(frontBottomRightId).GetPosition(),
        0.05);
    drawCylinder(
        m_GoalNet.GetParticle(backBottomLeftId).GetPosition(),
        m_GoalNet.GetParticle(frontBottomLeftId).GetPosition(),
        0.05);
    */
    drawCylinder(
        m_GoalNet.GetParticle(backBottomLeftId).GetPosition(),
        m_GoalNet.GetParticle(backTopLeftId).GetPosition(),
        0.05);
    drawCylinder(
        m_GoalNet.GetParticle(backBottomRightId).GetPosition(),
        m_GoalNet.GetParticle(backTopRightId).GetPosition(),
        0.05);
    drawCylinder(
        m_GoalNet.GetParticle(backTopRightId).GetPosition(),
        m_GoalNet.GetParticle(backTopLeftId).GetPosition(),
        0.05);
    drawCylinder(
        m_GoalNet.GetParticle(backTopRightId).GetPosition(),
        m_GoalNet.GetParticle(frontTopRightId).GetPosition(),
        0.05);
    drawCylinder(
        m_GoalNet.GetParticle(backTopLeftId).GetPosition(),
        m_GoalNet.GetParticle(frontTopLeftId).GetPosition(),
        0.05);
    drawCylinder(
        m_GoalNet.GetParticle(frontTopRightId).GetPosition(),
        m_GoalNet.GetParticle(frontTopLeftId).GetPosition(),
        0.05);
    drawCylinder(
        m_GoalNet.GetParticle(frontBottomRightId).GetPosition(),
        m_GoalNet.GetParticle(frontTopRightId).GetPosition(),
        0.05);
    drawCylinder(
        m_GoalNet.GetParticle(frontBottomLeftId).GetPosition(),
        m_GoalNet.GetParticle(frontTopLeftId).GetPosition(),
        0.05);
}

void CMassSpringSystem::DrawBall()
{
    for (unsigned int ballIdx = 0; ballIdx < BallNum(); ++ballIdx)
    {
        drawSolidBall(m_Balls[ballIdx].GetPosition(), m_Balls[ballIdx].GetRadius());
    }
}


Vector3d CMassSpringSystem::CalcTriangleNormal(CParticle &p1,CParticle &p2,CParticle &p3)
{
    Vector3d pos1 = p1.GetPosition();
    Vector3d pos2 = p2.GetPosition();
    Vector3d pos3 = p3.GetPosition();

    Vector3d v1 = pos2-pos1;
    Vector3d v2 = pos3-pos1;

    return v1.CrossProduct(v2);
}

void CMassSpringSystem::DrawShadow(const Vector3d &a_rLightPos)
{
}
void CMassSpringSystem::DrawShadowPolygon(const Vector3d &a_rLightPos,const Vector3d &a_rNormalVec,
                                          const Vector3d &a_rVerPos1,const Vector3d &a_rVerPos2)
{
    Vector3d ShadowPos1,ShadowPos2,LightVec;
    LightVec = (a_rVerPos1 - a_rLightPos);
    LightVec.Normalize();
    ShadowPos1 = a_rVerPos1 + (a_rVerPos1 - a_rLightPos) * 5.0f;
    ShadowPos2 = a_rVerPos2 + (a_rVerPos2 - a_rLightPos) * 5.0f;
    
    if(a_rNormalVec.DotProduct(LightVec)<=0.0f)
    {
        glBegin( GL_QUADS );
        glVertex3dv( a_rVerPos1.val );
        glVertex3dv( ShadowPos1.val );
        glVertex3dv( ShadowPos2.val );
        glVertex3dv( a_rVerPos2.val );
        glEnd();
    }
    else
    {
        glBegin( GL_QUADS );
        glVertex3dv( a_rVerPos1.val );
        glVertex3dv( a_rVerPos2.val );
        glVertex3dv( ShadowPos2.val );
        glVertex3dv( ShadowPos1.val );
        glEnd();
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Set and Update
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMassSpringSystem::Reset()
{ 
    m_GoalNet.Reset();
    m_Balls.clear();
}

void CMassSpringSystem::SetSpringCoef(const double a_cdSpringCoef, const CSpring::enType_t a_cSpringType)
{
    if (a_cSpringType == CSpring::Type_nStruct)
    {
        m_dSpringCoefStruct = a_cdSpringCoef;
        m_GoalNet.SetSpringCoef(a_cdSpringCoef, CSpring::Type_nStruct);
    }
    else if (a_cSpringType == CSpring::Type_nShear)
    {
        m_dSpringCoefShear = a_cdSpringCoef;
        m_GoalNet.SetSpringCoef(a_cdSpringCoef, CSpring::Type_nShear);
    }
    else if (a_cSpringType == CSpring::Type_nBending)
    {
        m_dSpringCoefBending = a_cdSpringCoef;
        m_GoalNet.SetSpringCoef(a_cdSpringCoef, CSpring::Type_nBending);
    }
    else
    {
        std::cout << "Error spring type in CMassSpringSystme SetSpringCoef" << std::endl;
    }

}

void CMassSpringSystem::SetDamperCoef(const double a_cdDamperCoef, const CSpring::enType_t a_cSpringType)
{
    if (a_cSpringType == CSpring::Type_nStruct)
    {
        m_dDamperCoefStruct = a_cdDamperCoef;
        m_GoalNet.SetDamperCoef(a_cdDamperCoef, CSpring::Type_nStruct);
    }
    else if (a_cSpringType == CSpring::Type_nShear)
    {
        m_dDamperCoefShear = a_cdDamperCoef;
        m_GoalNet.SetDamperCoef(a_cdDamperCoef, CSpring::Type_nShear);
    }
    else if (a_cSpringType == CSpring::Type_nBending)
    {
        m_dDamperCoefBending = a_cdDamperCoef;
        m_GoalNet.SetDamperCoef(a_cdDamperCoef, CSpring::Type_nBending);
    }
    else
    {
        std::cout << "Error spring type in CMassSpringSystme SetDamperCoef" << std::endl;
    }
}

double CMassSpringSystem::GetSpringCoef(const CSpring::enType_t a_cSpringType)
{
    if(a_cSpringType == CSpring::Type_nStruct)
    {
        return m_dSpringCoefStruct;
    }
    else if(a_cSpringType == CSpring::Type_nShear)
    {
        return m_dSpringCoefShear;
    }
    else if(a_cSpringType == CSpring::Type_nBending)
    {
        return m_dSpringCoefBending;
    }
    else
    {
        std::cout<<"Error spring type in CMassSpringSystme GetSpringCoef"<<std::endl;
        return -1.0;
    }
}
double CMassSpringSystem::GetDamperCoef(const CSpring::enType_t a_cSpringType)
{
    if(a_cSpringType == CSpring::Type_nStruct)
    {
        return m_dDamperCoefStruct;
    }
    else if(a_cSpringType == CSpring::Type_nShear)
    {
        return m_dDamperCoefShear;
    }
    else if(a_cSpringType == CSpring::Type_nBending)
    {
        return m_dDamperCoefBending;
    }
    else
    {
        std::cout<<"Error spring type in CMassSpringSystme GetDamperCoef"<<std::endl;
        return -1.0;
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Simulation Part
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CMassSpringSystem::CheckStable()
{
    double threshold = 1e6;
    for(int pIdx = 0; pIdx < m_GoalNet.ParticleNum(); pIdx++)
    {
        Vector3d particleVel = m_GoalNet.GetParticle(pIdx).GetVelocity();
        if (particleVel.Magnitude() > threshold)
        {
            return false;
        }  
    }
    return true;
}
void CMassSpringSystem::SimulationOneTimeStep()
{
    if(m_bSimulation)
    {
	    //ComputeAllForce();
        Integrate();
    }
    
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Initialization
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CMassSpringSystem::CreateBall()
{
    // randomly assign initial velocity and position to a ball
    Ball newBall;
    Vector3d randomOffset((double)(rand() % 5 + 5.0), (double)(rand() % 5), (double)(rand() % 5));
    Vector3d initBallPos = m_GoalNet.GetInitPos() + randomOffset;
    Vector3d initBallVel = (m_GoalNet.GetInitPos()- initBallPos)*7.0;
    //Vector3d initBallVel = Vector3d::ZERO;
    newBall.SetPosition(initBallPos);
    newBall.SetVelocity(initBallVel);
    m_Balls.push_back(newBall);
}

int CMassSpringSystem::BallNum()
{
    return m_Balls.size();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Compute Force
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMassSpringSystem::ResetAllForce()
{
    for (int pIdx = 0; pIdx < m_GoalNet.ParticleNum(); ++pIdx)
    {
        //TO DO 6
        m_GoalNet.GetParticle(pIdx).SetAcceleration(Vector3d::ZERO);
    }

    for (int ballIdx = 0; ballIdx < BallNum(); ++ballIdx)
    {
        m_Balls[ballIdx].SetAcceleration(Vector3d::ZERO);
    }
}

void CMassSpringSystem::ComputeAllForce()
{
    ComputeParticleForce();
    ComputeBallForce();
}

void CMassSpringSystem::ComputeParticleForce()
{
    m_GoalNet.AddForceField(m_ForceField);
    m_GoalNet.ComputeInternalForce();
}

void CMassSpringSystem::ComputeBallForce()
{
    for (int ballIdx = 0; ballIdx < BallNum(); ++ballIdx)
    {
        //m_Balls[ballIdx].SetAcceleration(m_ForceField);
        m_Balls[ballIdx].AddForce(m_ForceField * m_Balls[ballIdx].GetMass());
    }
}

void CMassSpringSystem::HandleCollision()
{
    NetPlaneCollision();
    BallPlaneCollision();
    BallToBallCollision();
    BallNetCollision();
}

void CMassSpringSystem::NetPlaneCollision()
{
    //TO DO 2
    static const double eEPSILON = 0.01;
    double resistCoef = 0.5;
    double frictionCoef = 0.3;
    Vector3d planeNormal(0.0, 1.0, 0.0);    // the normal vector of plane
    Vector3d planePoint(0.0, -1.0, 0.0);    // point on the plane           
    planeNormal.Normalize();

    for (int pIdx = 0; pIdx < m_GoalNet.ParticleNum(); pIdx++)
    {
        //trace each particles
        Vector3d pos = m_GoalNet.GetParticle(pIdx).GetPosition();
        Vector3d vel = m_GoalNet.GetParticle(pIdx).GetVelocity();

        //collision detection
        double normalLength = planeNormal.Length();
        double particleToPlaneDist = planeNormal.DotProduct((pos - planePoint));

        //collision response
        if (particleToPlaneDist < eEPSILON && vel.DotProduct(planeNormal) < 0.0)
        {
            // adjust velocity
            Vector3d normalVel = planeNormal * vel.DotProduct(planeNormal);    //projection along plane normal
            Vector3d tengentVel = vel - normalVel;
            Vector3d resultVel = -normalVel*resistCoef + tengentVel;
            m_GoalNet.GetParticle(pIdx).SetVelocity(resultVel);

            // adjust position
            if (particleToPlaneDist < 0.0)
            {
                m_GoalNet.GetParticle(pIdx).AddPosition(planeNormal * -particleToPlaneDist);
            }

            // contact force
            Vector3d force = m_GoalNet.GetParticle(pIdx).GetForce();
            double normalDotForce = planeNormal.DotProduct(force);    //N dot F
            if (normalDotForce < 0)
            {
                Vector3d resistForce = -planeNormal * normalDotForce;
                Vector3d frictionForce = -frictionCoef * (-normalDotForce) * tengentVel;
                Vector3d contactForce = resistForce + frictionForce;
                m_GoalNet.GetParticle(pIdx).AddForce(contactForce);
                m_ParticleContactForce[pIdx] += contactForce;
            }
        }
    }
}

void CMassSpringSystem::BallPlaneCollision()
{
    //TO DO 2
    static const double eEPSILON = 0.01;
    double resistCoef = 0.5;
    double frictionCoef = 0.3;
    Vector3d planeNormal(0.0, 1.0, 0.0);    // the normal vector of plane
    Vector3d planePoint(0.0, -1.0, 0.0);    // point on the plane           
    planeNormal.Normalize();

    //trace each ball
    for (int ballIdx = 0; ballIdx < BallNum(); ++ballIdx)
    {
        Vector3d pos = m_Balls[ballIdx].GetPosition();
        Vector3d vel = m_Balls[ballIdx].GetVelocity();
        Vector3d normalVel = planeNormal * vel.DotProduct(planeNormal);    //projection along plane normal
        Vector3d tengentVel = vel - normalVel;
        Vector3d acc = m_Balls[ballIdx].GetAcceleration();

        //collision detection
        double ballToPlaneDist = planeNormal.DotProduct((pos - planePoint));

        //collision response     
        if (ballToPlaneDist < eEPSILON + m_Balls[ballIdx].GetRadius() && vel.DotProduct(planeNormal) < 0.0)
        {
            // adjust velocity
            Vector3d resultVel = -normalVel*resistCoef + tengentVel;
            m_Balls[ballIdx].SetVelocity(resultVel);

            // adjust position
            double penetrationDist = m_Balls[ballIdx].GetRadius() - ballToPlaneDist;
            if (penetrationDist > 0)
            {
                m_Balls[ballIdx].AddPosition(planeNormal * penetrationDist);
            }

            // contact force
            Vector3d force = m_Balls[ballIdx].GetForce();
            double normalDotForce = planeNormal.DotProduct(force);    //N dot F
            if (normalDotForce <= 0.0)
            {
                Vector3d resistForce = -planeNormal * normalDotForce;
                Vector3d frictionForce = -frictionCoef * (-normalDotForce) * tengentVel;
                Vector3d contactForce = resistForce + frictionForce;
                m_Balls[ballIdx].AddForce(contactForce);
                m_BallContactForce[ballIdx] += contactForce;
            }
        }
    }
}

void CMassSpringSystem::BallToBallCollision()
{
    static const double eEPSILON = 0.01;

    for (int idx1st = 0; idx1st < BallNum(); ++idx1st)
    {
        Vector3d pos1st = m_Balls[idx1st].GetPosition();
        double mass1st = m_Balls[idx1st].GetMass();
        Vector3d vel1st = m_Balls[idx1st].GetVelocity();

        for (int idx2nd = idx1st+1; idx2nd < BallNum(); ++idx2nd)
        {
            Vector3d pos2nd = m_Balls[idx2nd].GetPosition();
            Vector3d vel2nd = m_Balls[idx2nd].GetVelocity();
            double mass2nd = m_Balls[idx2nd].GetMass();

            //collision detection
            Vector3d secondToFirstVec = pos1st - pos2nd;
            double distance = secondToFirstVec.Length();

            //collision response
            if (distance < eEPSILON + m_Balls[idx1st].GetRadius() + m_Balls[idx2nd].GetRadius())
            {
                // compute contact force
                Vector3d normalVec = secondToFirstVec.NormalizedCopy();
                Vector3d normalVel1st = normalVec.DotProduct(vel1st) * normalVec;
                Vector3d tengentVel1st = vel1st - normalVel1st;
                Vector3d normalVel2nd = (-normalVec).DotProduct(vel2nd) * (-normalVec);
                Vector3d tengentVel2nd = vel2nd - normalVel2nd;

                double denominator = mass1st + mass2nd;
                Vector3d newVel1st = (mass1st - mass2nd) / denominator * normalVel1st
                    + 2*mass2nd / denominator * normalVel2nd
                    + tengentVel1st;
                Vector3d newVel2nd = 2*mass1st / denominator * normalVel1st
                    + (mass2nd - mass1st) / denominator * normalVel2nd
                    + tengentVel2nd;

                Vector3d contactForce1st = mass1st * (newVel1st - vel1st) / m_dDeltaT;
                Vector3d contactForce2nd = mass2nd * (newVel2nd - vel2nd) / m_dDeltaT;

                m_Balls[idx1st].AddForce(contactForce1st);
                m_Balls[idx2nd].AddForce(contactForce2nd);

                m_BallContactForce[idx1st] += contactForce1st;
                m_BallContactForce[idx2nd] += contactForce2nd;
            }
        }
    }
}

void CMassSpringSystem::BallNetCollision()
{
    static const double eEPSILON = 0.01;

    for (int ballIdx = 0; ballIdx < BallNum(); ++ballIdx)
    {
        Vector3d ballPos = m_Balls[ballIdx].GetPosition();
        Vector3d ballVel = m_Balls[ballIdx].GetVelocity();
        double ballMass = m_Balls[ballIdx].GetMass();

        for (int pIdx = 0; pIdx < m_GoalNet.ParticleNum(); ++pIdx)
        {
            //trace each particles
            Vector3d particlePos = m_GoalNet.GetParticle(pIdx).GetPosition();
            Vector3d particleVel = m_GoalNet.GetParticle(pIdx).GetVelocity();

            //collision detection
            Vector3d particleToBall = ballPos - particlePos;
            double particleToBallDist = particleToBall.Length();

            //collision response
            if (particleToBallDist < eEPSILON + m_Balls[ballIdx].GetRadius())
            {
                // compute contact force
                Vector3d normalVec = particleToBall.NormalizedCopy();
                Vector3d ballNormalVel = normalVec.DotProduct(ballVel) * normalVec;
                Vector3d ballTengentVel = ballVel - ballNormalVel;
                Vector3d particleNormalVel = (-normalVec).DotProduct(particleVel) * (-normalVec);
                Vector3d particleTengentVel = particleVel - particleNormalVel;

                double particleMass = m_GoalNet.GetParticle(pIdx).GetMass();
                double denominator = ballMass + particleMass;
                Vector3d newBallVel = (ballMass - particleMass) / denominator * ballNormalVel
                    + 2 * particleMass / denominator * particleNormalVel
                    + ballTengentVel;
                Vector3d newParticleVel = 2 * ballMass / denominator * ballNormalVel
                    + (particleMass - ballMass) / denominator * particleNormalVel
                    + particleTengentVel;

                Vector3d ballContactForce = ballMass * (newBallVel - ballVel) / m_dDeltaT;
                Vector3d particleContactForce = particleMass * (newParticleVel - particleVel) / m_dDeltaT;

                m_GoalNet.GetParticle(pIdx).AddForce(particleContactForce);
                m_Balls[ballIdx].AddForce(ballContactForce);

                m_ParticleContactForce[pIdx] += particleContactForce;
                m_BallContactForce[ballIdx] += ballContactForce;
            }
        } // for particle
    } // for ball
   
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Integrator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMassSpringSystem::Integrate()
{
    ResetContactForce();

    if(m_iIntegratorType == CMassSpringSystem::EXPLICIT_EULER)
    {
        ComputeAllForce();
        HandleCollision();
	    ExplicitEuler();
        ResetAllForce();
    }
    else if(m_iIntegratorType == CMassSpringSystem::RUNGE_KUTTA)
    {
        RungeKutta();
        ResetAllForce();
    }
    else
    {
        std::cout<<"Error integrator type, use explicit Euler instead!!"<<std::endl;
        ComputeAllForce();
        HandleCollision();
        ExplicitEuler();
        ResetAllForce();
    }
}

void CMassSpringSystem::ExplicitEuler()
{
    // Goal Net
    for (int pIdx = 0; pIdx < m_GoalNet.ParticleNum(); ++pIdx)
    {
        //TO DO 6
        Vector3d acc = m_GoalNet.GetParticle(pIdx).GetAcceleration();
        m_GoalNet.GetParticle(pIdx).AddVelocity(acc * m_dDeltaT);
        Vector3d vel = m_GoalNet.GetParticle(pIdx).GetVelocity();
        m_GoalNet.GetParticle(pIdx).AddPosition(vel * m_dDeltaT);
    }

    // Balls
    for (int ballIdx = 0; ballIdx < BallNum(); ++ballIdx)
    {
        Vector3d acc = m_Balls[ballIdx].GetAcceleration();
        m_Balls[ballIdx].AddVelocity(acc * m_dDeltaT);
        Vector3d vel = m_Balls[ballIdx].GetVelocity();
        m_Balls[ballIdx].AddPosition(vel * m_dDeltaT);
    }
}

void CMassSpringSystem::RungeKutta()
{
    //TO DO 7
    BallNetCollision();
    BallToBallCollision();
    ParticleRungeKutta();
    BallRungeKutta();
}

void CMassSpringSystem::ParticleRungeKutta()
{
    struct StateStep
    {
        Vector3d deltaVel;
        Vector3d deltaPos;
    };

    //container to store k1~k4 for each particles
    vector<Vector3d> curPosCntr, curVelCntr;
    vector<StateStep> k1StepCntr, k2StepCntr, k3StepCntr, k4StepCntr;
    
    // initialize
    ComputeParticleForce();
    NetPlaneCollision();
    for (int pIdx = 0; pIdx < m_GoalNet.ParticleNum(); ++pIdx)
    {
        //record current state
        curPosCntr.push_back(m_GoalNet.GetParticle(pIdx).GetPosition());    // p0
        curVelCntr.push_back(m_GoalNet.GetParticle(pIdx).GetVelocity());    // v0
    }

    // k1
    for (int pIdx = 0; pIdx < m_GoalNet.ParticleNum(); ++pIdx)
    {
        // f(x0, t0)
        Vector3d acc = m_GoalNet.GetParticle(pIdx).GetAcceleration();
        Vector3d vel = curVelCntr[pIdx] + acc*m_dDeltaT;

        StateStep k1Step;    //k1 = h * f(x0, t0)
        k1Step.deltaVel = acc * m_dDeltaT;
        k1Step.deltaPos = vel * m_dDeltaT;
        k1StepCntr.push_back(k1Step);
    }

    // k2
    // integrate with k1
    for (int pIdx = 0; pIdx < m_GoalNet.ParticleNum(); ++pIdx)
    {
        //update state by half step: x0 -> x0 + k1/2
        m_GoalNet.GetParticle(pIdx).SetVelocity(curVelCntr[pIdx] + k1StepCntr[pIdx].deltaVel*0.5);
        m_GoalNet.GetParticle(pIdx).SetPosition(curPosCntr[pIdx] + k1StepCntr[pIdx].deltaPos*0.5);
        m_GoalNet.GetParticle(pIdx).SetForce(Vector3d::ZERO);
    }
    ComputeParticleForce();

    for (int pIdx = 0; pIdx < m_GoalNet.ParticleNum(); ++pIdx)
    {
        m_GoalNet.GetParticle(pIdx).AddForce(m_ParticleContactForce[pIdx]);

        //get f(x0 + k1/2, t0 + h/2)
        Vector3d acc = m_GoalNet.GetParticle(pIdx).GetAcceleration();
        Vector3d vel = curVelCntr[pIdx] + acc*m_dDeltaT;

        StateStep k2Step;    //k2 = h * f(x0 + k1/2, t0 + h/2)
        k2Step.deltaVel = acc * m_dDeltaT;
        k2Step.deltaPos = vel * m_dDeltaT;
        k2StepCntr.push_back(k2Step);
    }

    //k3
    //integrate with k2
    for (int pIdx = 0; pIdx < m_GoalNet.ParticleNum(); ++pIdx)
    {
        //update state by half step: x0 -> x0 + k2/2
        m_GoalNet.GetParticle(pIdx).SetVelocity(curVelCntr[pIdx] + k2StepCntr[pIdx].deltaVel*0.5);
        m_GoalNet.GetParticle(pIdx).SetPosition(curPosCntr[pIdx] + k2StepCntr[pIdx].deltaPos*0.5);
        m_GoalNet.GetParticle(pIdx).SetForce(Vector3d::ZERO);
    }
    ComputeParticleForce();

    //compute k3
    for (int pIdx = 0; pIdx < m_GoalNet.ParticleNum(); ++pIdx)
    {
        m_GoalNet.GetParticle(pIdx).AddForce(m_ParticleContactForce[pIdx]);
        
        //get f(x0 + k2/2, t0 + h/2)
        Vector3d acc = m_GoalNet.GetParticle(pIdx).GetAcceleration();
        Vector3d vel = curVelCntr[pIdx] + acc*m_dDeltaT;

        StateStep k3Step;    //k3 = h * f(x0 + k2/2, t0 + h/2)
        k3Step.deltaVel = acc * m_dDeltaT;
        k3Step.deltaPos = vel * m_dDeltaT;
        k3StepCntr.push_back(k3Step);
    }

    //k4
    //integrate with k3
    for (int pIdx = 0; pIdx < m_GoalNet.ParticleNum(); ++pIdx)
    {
        //update state by one step: x0 -> x0 + k3
        m_GoalNet.GetParticle(pIdx).SetVelocity(curVelCntr[pIdx] + k3StepCntr[pIdx].deltaVel);
        m_GoalNet.GetParticle(pIdx).SetPosition(curPosCntr[pIdx] + k3StepCntr[pIdx].deltaPos);
        m_GoalNet.GetParticle(pIdx).SetForce(Vector3d::ZERO);
    }
    ComputeParticleForce();

    //compute k4
    for (int pIdx = 0; pIdx < m_GoalNet.ParticleNum(); ++pIdx)
    {
        m_GoalNet.GetParticle(pIdx).AddForce(m_ParticleContactForce[pIdx]);

        //get f(x0 + k3, t0 + h)
        Vector3d acc = m_GoalNet.GetParticle(pIdx).GetAcceleration();
        Vector3d vel = curVelCntr[pIdx] + acc*m_dDeltaT;

        StateStep k4Step;    //k4 = h * f(x0 + k3, t0 + h)
        k4Step.deltaVel = acc * m_dDeltaT;
        k4Step.deltaPos = vel * m_dDeltaT;
        k4StepCntr.push_back(k4Step);
    }

    //integrate with k1, k2, k3, k4
    for (int pIdx = 0; pIdx < m_GoalNet.ParticleNum(); ++pIdx)
    {
        //update state by one step: x0 -> x0 + (k1 + 2*k2 + 2*k3 + k4)/6
        Vector3d deltaVel = k1StepCntr[pIdx].deltaVel
            + 2 * k2StepCntr[pIdx].deltaVel
            + 2 * k3StepCntr[pIdx].deltaVel
            + k4StepCntr[pIdx].deltaVel;
        Vector3d deltaPos = k1StepCntr[pIdx].deltaPos
            + 2 * k2StepCntr[pIdx].deltaPos
            + 2 * k3StepCntr[pIdx].deltaPos
            + k4StepCntr[pIdx].deltaPos;
        m_GoalNet.GetParticle(pIdx).SetVelocity(curVelCntr[pIdx] + deltaVel / 6.0);
        m_GoalNet.GetParticle(pIdx).SetPosition(curPosCntr[pIdx] + deltaPos / 6.0);
    }
}

void CMassSpringSystem::BallRungeKutta()
{
    struct StateStep
    {
        Vector3d deltaVel;
        Vector3d deltaPos;
    };

    //container to store k1~k4 for each particles
    vector<Vector3d> curPosCntr, curVelCntr;
    vector<StateStep> k1StepCntr, k2StepCntr, k3StepCntr, k4StepCntr;

    // initialze
    ComputeBallForce();
    BallPlaneCollision();

    for (int ballIdx = 0; ballIdx < BallNum(); ++ballIdx)
    {
        //record current state
        curPosCntr.push_back(m_Balls[ballIdx].GetPosition());
        curVelCntr.push_back(m_Balls[ballIdx].GetVelocity());
    }

    // k1
    for (int ballIdx = 0; ballIdx < BallNum(); ++ballIdx)
    {
        m_Balls[ballIdx].AddForce(m_ParticleContactForce[ballIdx]);

        //get f(x0, t0)
        Vector3d acc = m_Balls[ballIdx].GetAcceleration();
        Vector3d vel = curVelCntr[ballIdx] + acc*m_dDeltaT;

        StateStep k1Step;    //k1 = h * f(x0, t0)
        k1Step.deltaVel = acc * m_dDeltaT;
        k1Step.deltaPos = vel * m_dDeltaT;
        k1StepCntr.push_back(k1Step);
    } 

    // k2
    // integrate with k1
    for (int ballIdx = 0; ballIdx < BallNum(); ++ballIdx)
    {
        //update state by half step: x0 -> x0 + k1/2
        m_Balls[ballIdx].SetVelocity(curVelCntr[ballIdx] + k1StepCntr[ballIdx].deltaVel*0.5);
        m_Balls[ballIdx].SetPosition(curPosCntr[ballIdx] + k1StepCntr[ballIdx].deltaPos*0.5);
        m_Balls[ballIdx].SetForce(Vector3d::ZERO);
    }
    ComputeBallForce();

    for (int ballIdx = 0; ballIdx < BallNum(); ++ballIdx)
    {
        m_Balls[ballIdx].AddForce(m_BallContactForce[ballIdx]);

        //get f(x0 + k1/2, t0 + h/2)
        Vector3d acc = m_Balls[ballIdx].GetAcceleration();
        Vector3d vel = curVelCntr[ballIdx] + acc*m_dDeltaT;

        StateStep k2Step;    //k2 = h * f(x0 + k1/2, t0 + h/2)
        k2Step.deltaVel = acc * m_dDeltaT;
        k2Step.deltaPos = vel * m_dDeltaT;
        k2StepCntr.push_back(k2Step);
    }

    //k3
    //integrate with k2
    for (int ballIdx = 0; ballIdx < BallNum(); ++ballIdx)
    {
        //update state by half step: x0 -> x0 + k2/2
        m_Balls[ballIdx].SetVelocity(curVelCntr[ballIdx] + k2StepCntr[ballIdx].deltaVel*0.5);
        m_Balls[ballIdx].SetPosition(curPosCntr[ballIdx] + k2StepCntr[ballIdx].deltaPos*0.5);
        m_Balls[ballIdx].SetForce(Vector3d::ZERO);
    }
    ComputeBallForce();

    //compute k3
    for (int ballIdx = 0; ballIdx < BallNum(); ++ballIdx)
    {
        m_Balls[ballIdx].AddForce(m_BallContactForce[ballIdx]);

        //get f(x0 + k2/2, t0 + h/2)
        Vector3d acc = m_Balls[ballIdx].GetAcceleration();
        Vector3d vel = curVelCntr[ballIdx] + acc*m_dDeltaT;

        StateStep k3Step;    //k3 = h * f(x0 + k2/2, t0 + h/2)
        k3Step.deltaVel = acc * m_dDeltaT;
        k3Step.deltaPos = vel * m_dDeltaT;
        k3StepCntr.push_back(k3Step);
    }

    //k4
    //integrate with k3
    for (int ballIdx = 0; ballIdx < BallNum(); ++ballIdx)
    {
        //update state by one step: x0 -> x0 + k3
        m_Balls[ballIdx].SetVelocity(curVelCntr[ballIdx] + k3StepCntr[ballIdx].deltaVel);
        m_Balls[ballIdx].SetPosition(curPosCntr[ballIdx] + k3StepCntr[ballIdx].deltaPos);
        m_Balls[ballIdx].SetForce(Vector3d::ZERO);
    }
    ComputeBallForce();

    //compute k4
    for (int ballIdx = 0; ballIdx < BallNum(); ++ballIdx)
    {
        m_Balls[ballIdx].AddForce(m_BallContactForce[ballIdx]);

        //get f(x0 + k3, t0 + h)
        Vector3d acc = m_Balls[ballIdx].GetAcceleration();
        Vector3d vel = curVelCntr[ballIdx] + acc*m_dDeltaT;

        StateStep k4Step;    //k4 = h * f(x0 + k3, t0 + h)
        k4Step.deltaVel = acc * m_dDeltaT;
        k4Step.deltaPos = vel * m_dDeltaT;
        k4StepCntr.push_back(k4Step);
    }

    //integrate with k1, k2, k3, k4
    for (int ballIdx = 0; ballIdx < BallNum(); ++ballIdx)
    {
        //update state by one step: x0 -> x0 + (k1 + 2*k2 + 2*k3 + k4)/6
        Vector3d deltaVel = k1StepCntr[ballIdx].deltaVel
            + 2 * k2StepCntr[ballIdx].deltaVel
            + 2 * k3StepCntr[ballIdx].deltaVel
            + k4StepCntr[ballIdx].deltaVel;
        Vector3d deltaPos = k1StepCntr[ballIdx].deltaPos
            + 2 * k2StepCntr[ballIdx].deltaPos
            + 2 * k3StepCntr[ballIdx].deltaPos
            + k4StepCntr[ballIdx].deltaPos;
        m_Balls[ballIdx].SetVelocity(curVelCntr[ballIdx] + deltaVel / 6.0);
        m_Balls[ballIdx].SetPosition(curPosCntr[ballIdx] + deltaPos / 6.0);
    }
}

void CMassSpringSystem::ResetContactForce()
{
    m_BallContactForce.clear();
    m_BallContactForce.resize(BallNum());
    for (int ballIdx = 0; ballIdx < BallNum(); ++ballIdx)
    {
        m_BallContactForce.push_back(Vector3d::ZERO);
    }
    m_ParticleContactForce.clear();
    m_ParticleContactForce.resize(m_GoalNet.ParticleNum());
    for (int pIdx = 0; pIdx < m_GoalNet.ParticleNum(); ++pIdx)
    {
        m_ParticleContactForce.push_back(Vector3d::ZERO);
    }
}